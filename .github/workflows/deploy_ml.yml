name: Deploy to EC2 with Docker and ECR

on:
  push:
    branches:
      - main  # or your deployment branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      ECR_REGISTRY: <your_account_id>.dkr.ecr.<your-region>.amazonaws.com
      ECR_REPOSITORY: optiquant
      IMAGE_TAG: latest
      CONTAINER_NAME: optiquant

    steps:
    - name: üîÑ Checkout repo
      uses: actions/checkout@v3

    - name: üêç Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.x

    - name: üîê Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: <your-region>  # e.g. ap-south-1

    - name: üê≥ Log in to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: üì¶ Build, tag, and push Docker image to ECR
      run: |
        docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: üîê Set up SSH for EC2 access
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

    - name: üöÄ Deploy on EC2
      run: |
        ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} << EOF
          docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

          # Stop and remove old container if running
          docker rm -f $CONTAINER_NAME || true

          # Run container on port 8501
          docker run -d -p 8501:8501 \
            --name $CONTAINER_NAME \
            --restart always \
            $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        EOF

